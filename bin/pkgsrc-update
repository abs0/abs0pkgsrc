#!/bin/sh -e
# $Id: pkgsrc-update,v 1.92 2008/07/14 14:43:37 abs Exp $

PATH=/usr/pkg/sbin:/usr/pkg/bin:/usr/sbin:/sbin:$PATH
PKGSRC=/pkgsrc
PKG_UPDATE_SPOOL=/var/run/pkgsrc-update

# unset ENV to ensure it does not disrupt PATH or other settings
ENV=

# unset DISPLAY to ensure no builds try to use it
DISPLAY=

export TMPDIR=/tmp
export UPDATE_TARGET=package-install
if [ -n "$PKG_PATH" ]; then
    unset PKG_PATH
fi

start=$(date +%s)
umask 022

saved_args="$@"
args=$(getopt bhklrsuvRD:IU:P: $*)
if [ $? != 0 ]; then
    opt_h=1
fi
set -- $args
while [ $# != 0 ]; do
    case "$1" in
	-D )    opt_D="$2" ; shift;;	# Set extra defines for pk_chk
	-I )    opt_I=1 ;;		# Internal flag - install from stream
	-P )    opt_P="$2" ; shift;;	# Set packages dir
	-U )    opt_U="$2" ; shift;;	# Set extra undefines for pk_chk
	-b )	opt_b=-b ;;		# Binary
	-h )	opt_h=1 ;;		# Help
	-k )	opt_k=-k ;;		# Keep going
	-l )	opt_l=1 ;;		# List
	-r )	opt_r=-r ;;		# Force remove before install
	-R )	opt_R=-R;;		# Rolling replace
	-s )	opt_s=-s ;;		# Source (default)
	-u )	opt_u=1 ;;		# Run cvs Update
	-v )	opt_v=-v ;;		# Verbose
	-- )	shift ;  break ;;
	-* )	echo "Unknown argument: $1"; exit 1;;
	*)	break;;
    esac
    shift
done
if [ -n "$opt_h" ]; then
    cat << END
Usage: pkgsrc-update [opts] [hosts]
opts
	-D def	Set extra defines for pkg_chk
	-P dir	Set packages dir
	-r	Rotate /usr/pkg to /usr/OLDpkg
	-U def	Unset extra defines for pkg_chk
	-b	Use binary packages
	-h	This help
	-k	Keep going on errors (for -b)
	-l	List packages that would be copied/installed (only for remote)
	-u    	Run cvs Update
	-v    	Verbose
        -R	Use rolling replace

END
    exit
fi
if [ -z "$opt_b" ]; then
  opt_s=1
fi

as_root()
{
    if [ $(id -u) != 0 ] ; then
	doas "$@"
    else
	"$@"
    fi
}

confirm_symlink()
{
    from=$1
    to=$2
    link=$(readlink $to || echo '')
    case "$link" in
	$from | $from/ )
	    ;;  # All ok
	* )
	    echo "Symlink $from $to"
	    as_root rm -f $to
	    as_root ln -sf $from $to
	;;
    esac
}

determine_PKGBINDIR()
    {
    if [ -n "$opt_P" ]; then
	PKGBINDIR=$opt_P/All
    elif [ -d /pkgsrc/pkgtools/pkg_chk ] ; then
	PKGBINDIR=$(show_var PACKAGES)
	while [ ! -d $PKGBINDIR ] ; do
	    echo "* Trying $PKGBINDIR"
            # Try stripping off lowest OS version component
            test_PKGBINDIR=$(echo $PKGBINDIR | sed 's/\.[0-9][0-9]*-/-/')
            if [ $test_PKGBINDIR = $PKGBINDIR ] ; then
	        echo "** Unable to locate a PKGBINDIR"
                break;
            fi
            PKGBINDIR=$test_PKGBINDIR
        done
	PKGBINDIR=$PKGBINDIR/All
    else
	PKGBINDIR=.
    fi
    }

determine_and_wipe_WRKOBJDIR()
    {
    # Extract and wipe WRKOBJDIR
    #
    # Catch errors as could be called before pkg_install/bmake installed
    WRKOBJDIR=$(show_var WRKOBJDIR || true)
    if [ ! -n "$WRKOBJDIR" ] ; then
	WRKOBJDIR=${TMPDIR:-/var/obj}/pkg
    fi
    if [ -d $WRKOBJDIR ] ; then
	echo "rm -rf $WRKOBJDIR ..."
	as_root mv $WRKOBJDIR $WRKOBJDIR.old
	as_root rm -rf $WRKOBJDIR.old &
    fi
    as_root mkdir -p $WRKOBJDIR
    as_root chown $USER $WRKOBJDIR
    as_root chown -R $USER $WRKOBJDIR
    }

fatal()
    {
    echo $* >&2
    exit 1
    }

install_from_stream()
    {
    cd $PKG_UPDATE_SPOOL
    echo -n " (read)"
    pax -r $opt_v
    echo -n " (install)"

    if [ -n "$opt_r" ] ; then
	rotate_away_usr_pkg
    else
	pkg_add -uf pkg_chk
	pkg_chk -Brb -C pkgchk.conf -P $(pwd)
    fi

    pkg_add *.t?z
    postrun
    cd /
    rm -rf $PKG_UPDATE_SPOOL
    echo " Done"
    }

pkg_check_install()
    {
    PKGNAME=$1
    PKGDIR=$2
    CHECKFILE=$3
    if [ ! -x $CHECKFILE ]  ; then
	cd $PKGSRC/$PKGDIR
	if [ -n "$opt_b" ]; then
	    echo "update $PKGNAME from $PKGBINDIR..."
	    if [ -d $PKGBINDIR ] ; then
		RECENT=$(ls $PKGBINDIR | grep ^$PKGNAME | tail -1)
		if [ -n "$RECENT" ] ; then
		    echo pkg_add $PKGBINDIR/$RECENT
		    pkg_add $PKGBINDIR/$RECENT
		    if [ ! -x $CHECKFILE ]  ; then
			fatal "$CHECKFILE not found after install"
		    fi
		else
		    fatal "Unable to find any $PKGNAME"
		fi
	    else
		fatal "Unable to locate dir '$PKGBINDIR'"
	    fi
	fi
	if [ -n "$LOG" ] ; then
	    echo "build $PKGNAME..."
	    if [ ! -x $CHECKFILE ] && ! ($MAKE clean && $MAKE update) \
						>$LOG 2>&1 < /dev/null ; then
		cat $LOG
		exit 1
	    fi
	fi
    fi
    }

postrun()
    {
    if [ -x /usr/pkg/bin/update-config ] ; then
	as_root /usr/pkg/bin/update-config
    fi
    }

rotate_away_usr_pkg()
    {
    if [ -d /usr/OLDpkg ] ; then
        echo rm -rf /usr/OLDpkg
        as_root rm -rf /usr/OLDpkg
        sync
    fi
    if [ -d /usr/pkg ] ; then
        echo mv /usr/pkg /usr/OLDpkg
        as_root mv /usr/pkg /usr/OLDpkg
    fi
    }

show_var()
    {
    cd $PKGSRC/pkgtools/pkg_chk
    ${MAKE} show-var VARNAME=$1
    }

stream_to_remote_hosts()
    {
    PKGCHK_CONF=$(show_var PKGCHK_CONF)
    if [ -z ${PKGCHK_CONF} ] ; then
	PKGCHK_CONF=$(show_var PKGSRCDIR)/pkgchk.conf
    fi
    cd $PKGBINDIR
    HOST=$(hostname -s)
    for h; do
	echo -n "$h: "
	PKGLIST=$(pkg_chk -b -l -U $HOST,/etc/X11/XF86Config -D $h -P $PKGBINDIR || echo 'FAILED')
	case "$PKGLIST" in
	    *FAILED*)
		echo "pkg_chk -b -l -U $HOST,/etc/X11/XF86Config -D $h -P $PKGBINDIR failed:"
		echo "$PKGLIST"
		exit 1 ;;
	esac
	if [ -n "$opt_l" ] ; then
	    echo $PKGLIST
	else
	    echo -n " (transfer)"
	    ssh $h "rm -rf $PKG_UPDATE_SPOOL ; mkdir -p $PKG_UPDATE_SPOOL"
	    scp $PKGSRC/local/pkgsrc-update $h:$PKG_UPDATE_SPOOL/pkgsrc-update
	    scp $PKGCHK_CONF $h:$PKG_UPDATE_SPOOL/pkgchk.conf
	    pax -w $PKGLIST | ssh $h $PKG_UPDATE_SPOOL/pkgsrc-update -I $opt_r $opt_v
	fi
    done
    }

if [ $(uname) != NetBSD ] ; then
    MAKE=bmake
else
    MAKE=make
fi

# If /tmp is mounted noexec then use /var/tmp
#
if mount | grep -q '[ 	]/tmp[ 	].*noexec' ; then
    export PKG_TMPDIR=/var/tmp
fi

# The client side of a remote host update
#
if [ -n "$opt_I" ]; then
    install_from_stream
    exit
fi

# Ensure the ($PKGSRC) symlink is present to wherever pkgsrc lives
#
if [ ! -d $PKGSRC ];then
    case $0 in
	/*)
	    script=$0;
	    ;;
	*)
	    script=$(pwd)/$0
	    script=$(echo $script | sed 's:/\.::')
	    ;;
    esac
    confirm_symlink $(echo $script | sed 's:/local/pkgsrc-update::') $PKGSRC
fi

# Before update
if [ -n "$opt_s" ] ; then
    determine_and_wipe_WRKOBJDIR

    # Work around firefox and thunderbird processes hanging
    # /var/obj/pkg/www/firefox/work/build/_virtualenvs/init/bin/python /var/obj/pkg/www/firefox/work/firefox-68.0.1/configure.py --enable-application=browser --prefix=/usr/pkg --target=x86_64--netbsd --host=x86_64--netbsd --enable-default-toolkit=cairo-gtk3 --enable-release --enable-webrender=build --disable-tests --enable-system-pixman --enable-system-ffi --with-system-icu --with-system-nss --with-system-nspr --with-system-zlib --with-system-bz2 --with-system-libevent=/usr --disable-crashreporter --disable-necko-wifi --enable-chrome-format=flat --disable-libjpeg-turbo --with-system-webp --disable-gconf --disable-icf --disable-updater --disable-alsa --with-oss --disable-jemalloc --disable-debug-symbols --enable-optimize=-O2 --enable-install-strip --disable-debug --disable-pulseaudio --enable-dbus --enable-official-branding --disable-webrtc
    # /var/obj/pkg/mail/thunderbird/work/build/_virtualenv/bin/python /var/obj/pkg/mail/thunderbird/work/thunderbird-60.8.0/configure.py --enable-application=comm/mail --disable-webrtc --prefix=/usr/pkg --target=x86_64--netbsd --host=x86_64--netbsd --enable-default-toolkit=cairo-gtk3 --enable-pie --disable-tests --with-pthreads --enable-system-pixman --enable-system-ffi --with-system-icu --with-system-nss --with-system-nspr --with-system-zlib --with-system-bz2 --with-system-libevent=/usr --disable-crashreporter --disable-necko -wifi --enable-chrome-format=flat --disable-gconf --disable-icf --disable-updater --disable-alsa --with-oss --disable-jemalloc --disable-debug --enable-optimize=-O2 --enable-install-strip --disable-pulseaudio --enable-calendar --enable-dbus --enable-official-brandin
    pgrep -fl '_virtualenv.*/python.*configure.py' || true
    pkill -f '_virtualenv.*/python.*configure.py' || true
fi

# Update source tree & rebuild vulnerability-list as needed
#
if [ -n "$opt_u" ] ; then
    if [ $(id -u) != 0 ] ; then
        cvsu pkgsrc
        if [ ! -e /usr/pkg/bin/git ] ; then
            echo "No git found, skip wip update"
        else
            (cd /pkgsrc/wip && git stash && git pull && git stash list || git stash pop)
        fi
    else
        echo "Skipping 'cvsu pkgsrc' as root"
    fi
    as_root download-vulnerability-list || true
fi

if [ $(uname) = NetBSD ] ; then
    confirm_symlink $PKGSRC/local/config/mk.conf /etc/mk.conf
else
    as_root mkdir -p /usr/pkg/etc
    confirm_symlink $PKGSRC/local/config/mk.conf /usr/pkg/etc/mk.conf
fi

if [ $# != 0 ] ; then
    determine_PKGBINDIR
    stream_to_remote_hosts "$@"
    exit
fi

if [ -n "$opt_r" -a $(id -u) != 0 ] ; then
    # Use sh -c in case pkgrsc_update does not have +x
    # Will unfortunately break if saved_args includes whitespace/special chars
    as_root sh -c "$0 $saved_args"
    exit
fi

if [ -n "$opt_U" ]; then
    PKG_CHK_FLAGS="$PKG_CHK_FLAGS -U $opt_U"
fi
if [ -n "$opt_D" ]; then
    PKG_CHK_FLAGS="$PKG_CHK_FLAGS -D $opt_D"
fi

if [ -n "$opt_r" ] ; then
    if [ -n "$opt_b" -a -d /usr/pkg/sbin ] ; then
	# Try to reduce time without packages to a minimum
	# Before deleting anything, work out what packages will be needed
	determine_PKGBINDIR
	#XXX pkg_delete -r cpuflags	|| true
	pkg_delete -r pkg_chk	|| true
	pkg_delete -r pkg_rolling-replace || true
	#XXX pkg_check_install cpuflags devel/cpuflags /usr/pkg/bin/cpuflags
	determine_PKGBINDIR
	pkg_check_install pkg_chk pkgtools/pkg_chk /usr/pkg/sbin/pkg_chk
	opt_r_PKGS=$(pkg_chk $PKG_CHK_FLAGS -P $PKGBINDIR -lb $opt_k)
	if [ -z "$opt_r_PKGS" ] ; then
	    fatal "No packages found?"
	fi
    fi
    rotate_away_usr_pkg
fi

# Install via bootstrap if necessary
#
if [ $(uname) != NetBSD -a ! -x /usr/pkg/bin/bmake ] ; then
    opsys=$(uname -s)
    osrev=$(uname -r | sed 's/-.*//')  # eg: Linux 2.6.18-194.26.1.el5
    ospro=$(uname -p)
    mkdir -p /pkgsrc/packages
    if [ -z "$opt_b" ] ; then
        if ! c++ -v > /dev/null ; then
	    fatal 'No c++ compiler installed - "yum install -y gcc-c++ libtermcap-devel"?'
        fi
    fi
    bootstrap=/pkgsrc/packages/bootstrap-pkgsrc-$opsys-$osrev-$ospro.tgz
    if [ -z "$opt_b" -o ! -f $bootstrap ] ; then
	echo "Building bootstrap from source"
	cd /pkgsrc/bootstrap
	as_root rm -rf work /usr/pkg/etc/mk.conf
	as_root ./bootstrap --gzip-binary-kit $bootstrap
	as_root rm -rf work
	echo "bootstrap build complete"
    else
        echo "Installing binary bootstrap"
        as_root tar xpUzf $bootstrap -C /
        if [ ! -d /usr/pkg/bin ] ; then
	    fatal "/usr/pkg/bin not extracted from $bootstrap"
        fi
    fi
    confirm_symlink $PKGSRC/local/config/mk.conf /usr/pkg/etc/mk.conf
fi

# Must be after -r and bootstrap
determine_PKGBINDIR

PKG_CHK_FLAGS="$PKG_CHK_FLAGS -P $PKGBINDIR"

if [ -n "$opt_b" ] ; then
    #XXX pkg_check_install cpuflags	devel/cpuflags		/usr/pkg/bin/cpuflags
    pkg_check_install pkg_chk	pkgtools/pkg_chk	/usr/pkg/sbin/pkg_chk

    PKG_CHK_FLAGS="$PKG_CHK_FLAGS -b"

    if [ -n "$opt_r_PKGS" ] ; then
	cd $PKGBINDIR
	pkg_add $opt_r_PKGS
	postrun
	exit
    fi

    pkg_add -uf $PKGBINDIR/pkg_chk
    echo "pkg_chk -Brb -P $PKGBINDIR"
    pkg_chk -Brb -P $PKGBINDIR

else	# $opt_s

    MAKE_JOBS=$(sysctl -n hw.ncpu)
    if [ "$MAKE_JOBS" -gt 8 ]; then
       MAKE_JOBS=6
    elif [ "$MAKE_JOBS" -gt 4 ]; then
       MAKE_JOBS=$(($MAKE_JOBS - 2))
    elif [ "$MAKE_JOBS" -gt 1 ]; then
       MAKE_JOBS=2
    fi
    export MAKE_JOBS
    # Check and upgrade pkg_tools if necessary
    #
    PKGTOOLS_REQD=$(show_var PKGTOOLS_REQD)
    PKGTOOLS_VER=$(pkg_info -V)
    if [ $PKGTOOLS_REQD -gt $PKGTOOLS_VER ] ; then
	echo "Updating pkg_install"
	rm -rf /usr/pkg/pkgdb/pkg_install-*
	(cd /pkgsrc/pkgtools/pkg_install && ${MAKE} clean && ${MAKE} install)
    fi

    LOG=$WRKOBJDIR/update.log
    PKG_CHK_FLAGS="$PKG_CHK_FLAGS -s -L $LOG"

    # XXX maybe continue on error if -k ?
    if [ -n "$opt_s" -a -n "$opt_R" ]; then
        pkg_check_install pkg_rolling-replace pkgtools/pkg_rolling-replace /usr/pkg/bin/pkg_rolling-replace
        nice -n 20 pkg_rolling-replace -Bsu
    fi
    if [ -n "$opt_r" -a -x /usr/pkg/sbin/pkg_chk ] ; then
	echo "pkg_chk -Br"
	pkg_chk -Br -P $PKGBINDIR
    else
	later_pkg_chk_remove=1
    fi

    if [ -d $PKGBINDIR ] ; then
        as_root chown -R $USER $PKGBINDIR || true
    fi
    #XXX pkg_check_install cpuflags		devel/cpuflags	 /usr/pkg/bin/cpuflags
    pkg_check_install pkg_chk		pkgtools/pkg_chk /usr/pkg/sbin/pkg_chk

    if [ -n "$later_pkg_chk_remove" ] ; then
	pkg_chk -Br -P $PKGBINDIR
    fi

fi

PKG_CHK_FLAGS="$PKG_CHK_FLAGS -ak"

echo "pkg_chk $PKG_CHK_FLAGS..."
nice -n 20 pkg_chk $PKG_CHK_FLAGS < /dev/null || true
if [ ! -n "$opt_b" ] ; then
    echo "Update pkg_summary.bz2"
    ( cd $PKGBINDIR &&
      ls -t *.tgz | xargs pkg_info -X | bzip2 -9 > pkg_summary.bz2
    )
fi

postrun

elapsed=$(($(date +%s) - $start))
printf "Elapsed: %d:%02d\n" $(($elapsed / 60)) $(($elapsed % 60))

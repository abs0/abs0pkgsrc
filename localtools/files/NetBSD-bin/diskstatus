#!/usr/pkg/bin/perl
use strict;
use warnings;

$ENV{PATH} .= ':/usr/pkg/sbin';

my $err = 0;
my $disks = `sysctl -n hw.disknames`;

for my $disk ( split( ' ', $disks ) ) {
    my $status;
    if ( $disk =~ /^raid/ ) {
        $status = raidstatus($disk);
    }
    elsif ( $disk =~ /^[sw]d/ ) {
        $status = smartstatus($disk);
    }
    else {    # Nothing for ld
        next;
    }
    print "$disk: " . ( $status =~ /^ok/ ? $status : "** $status" ) . "\n";
    $err |= $status !~ /^ok/;
}
zfsstatus();
exit $err;

sub raidstatus {
    my $disk = shift;
    my %status;
    open( RAIDCTL, "raidctl -s $disk|" ) || die "raidctl failed: $!";
    my $issue = '';
    while (<RAIDCTL>) {
        chomp;
        if (m#^\s{4}\s*+(?:/dev/)?(\S+): (\S.*)#) {
            push( @{ $status{$2} }, $1 );
        }
        if ( m#^(Parity status: (.*))# && $2 ne 'clean' ) {
            $issue .= " ($1)";
        }
        if ( m#^((Reconstruction|Parity Re-write|Copyback)(.*))#
            && $3 ne ' is 100% complete.' )
        {
            my $msg = $1;
            $msg =~ s/\.$//;
            $issue .= " ($msg)";
        }
    }
    foreach my $status ( sort keys %status ) {
        if ( $status ne 'optimal' ) {
            $issue .= ' '
              . join( ',', sort @{ $status{$status} } ) . ' '
              . uc("$status");
        }
    }
    return $issue ? $issue : 'ok';
}

sub smartstatus {
    my $disk = shift;
    my $status;
    for ( my $loop = 0 ; $loop < 2 ; ++$loop ) {
        open( SMARTCTL, "smartctl -H /dev/r$disk|" )
          || die "smartctl failed: $!";
        while (<SMARTCTL>) {
            if (/SMART overall-health self-assessment test result: (.*)/) {
                $status = $1;
            }
            elsif (/SMART Health Status: (.*)/) {
                $status = $1;
            }
        }
      close(SMARTCTL);
        last if defined $status && $status ne 'UNKNOWN!';
    }
    $status =
        !defined $status                       ? 'no status'
      : $status eq 'PASSED' || $status eq 'OK' ? 'ok'
      :                                          'smart health:' . $status;
    return $status . smartrealloc($disk);
}

sub smartrealloc {
    my $disk   = shift;
    my $status = '';
    open( ATACTL, "atactl $disk smart status|" ) || die "atactl failed: $!";
    while (<ATACTL>) {
        if (/Reallocated sector count\s+(\d+)/ && $1 > 0) {
            $status = " [$1]";
        }
    }
    close(ATACTL);
    return $status;
}

sub command_output {
    open( CMD, '-|', @_ ) || die "@_ failed: $!";
    my @output = <CMD>;
    return @output;
}

sub zfsstatus {
    my @list = command_output( 'zpool', 'list' );
    if ( @list == 1 && $list[0] eq "no pools available\n" ) {
        return;
    }
    print @list;

    my @status = command_output( 'zpool', 'status', '-x' );
    if ( @status != 1 || $status[0] ne "all pools are healthy\n" ) {
        print @status;
    }
}

#!/usr/pkg/bin/perl
# $Id: mergelog,v 1.5 2007/01/31 17:07:02 abs Exp $

# Merge split webserver logs

use strict;
use warnings;
use Cwd;

my $tmpfile    = "TMP.mergelog.$$.7z";
my $compress7z = "7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=64m -ms=on";

sub mergedir {
    my ( $dir, @files ) = @_;
    my %target;
    my $olddir = getcwd;
    chdir($dir);
    if ( !@files ) {
        opendir( DIR, '.' ) || die("Unable to opendir '$dir': $!");
        push( @files, grep( $_ ne '.' && $_ ne '..', readdir(DIR) ) );
        closedir(DIR);
    }
    foreach my $file (@files) {
        die("Unparsable filename '$file'")
          if $file !~ /^(.+\D\d{4}-?)(\d\d)(.*)(.bz2|.gz|.7z)$/;
        my ( $base, $month, $extra, $ext ) = ( $1, $2, $3, $4 );
        my $targetfile = "$base$month";
        if ( $file ne "$targetfile.7z" ) {
            push( @{ $target{$targetfile}{$ext} }, $file );
        }
    }
    foreach my $targetfile ( sort keys %target ) {
        print "$targetfile: recompress";
        if ( -f "$targetfile.7z" ) {
            die "extract $targetfile failed: $!"
              if system("7za x $targetfile.7z");
        }
        else {
            unlink $targetfile;
        }
        foreach my $ext ( keys %{ $target{$targetfile} } ) {
            my @files = @{ $target{$targetfile}{$ext} };
            my $cmd;

            if    ( $ext =~ m/\.bz2$/ ) { $cmd = 'bzcat'; }
            elsif ( $ext =~ m/\.gz$/ )  { $cmd = 'zcat'; }
            elsif ( $ext =~ m/\.7z$/ )  { $cmd = '7zcat'; }
            else { die "Do not know how to extract '$ext'" }
            $cmd .= " @files >> $targetfile";
            die("extract failed: $!") if system($cmd);
        }

        unlink("$targetfile.7z");
        die("creation of $tmpfile failed: $!")
          if system("$compress7z $tmpfile $targetfile");
        die("$tmpfile too small") if -s $tmpfile < 100;
        safe_rename( $tmpfile, "$targetfile.7z" );
        foreach my $ext ( keys %{ $target{$targetfile} } ) {
            safe_unlink( $targetfile, @{ $target{$targetfile}{$ext} });
}
        print "\n";
    }
    chdir($olddir);
}

my @files;
foreach my $arg (@ARGV) {
    if   ( -d $arg ) { mergedir($arg); }
    else             { push( @files, $arg ); }
}
@files && mergedir( '.', @files );

sub safe_rename {
    my ( $to, $from ) = @_;
    rename( $to, $from ) || die("rename($to, $from) failed: $!");
}

sub safe_unlink {
    my (@files) = @_;

    unlink(@files) || die("unlink(@files) failed: $!");
}

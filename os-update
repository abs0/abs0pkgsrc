#!/bin/sh -e
# $Id: os-update,v 1.58 2008/11/18 15:01:54 abs Exp $

PATH=/usr/bin:/bin:/usr/sbin:/sbin:$PATH

if [ $(sysctl -n kern.ostype) != NetBSD ] ; then
    echo "This can only be run on NetBSD"
    exit 1
fi

if [ -d /opt/netbsd/arch ] ; then
    FILEDIR=/opt/netbsd/arch
else
    FILEDIR=/home/netbsd/arch
fi
KERNEL=kernels/$(sysctl -n kern.version|sed -n '1p'|sed -e 's/.*(//' -e 's/[.)].*//').gz
VERSION=$(uname -r)
MACHINE=$(uname -m)
HOST=$(sysctl -n kern.hostname | sed 's:\..*::')
DESTDIR=/

VERSION=$(case "$VERSION" in
    *.99.*) echo current ;;
    *) echo $VERSION | sed 's/\..*//' ;;
esac)

start=$(date +%s)

while getopts D:KXbd:fghk:nst:u f; do
    case $f in
	D) opt_D="$OPTARG"; TARDIR="$OPTARG"	;;
	K) opt_K=1				;;
	X) opt_X=1				;;
	b) opt_b=1				;;
	d) opt_d="$OPTARG"; DESTDIR="$OPTARG"	;;
	f) opt_f=-f				;;
	g) opt_g=1				;;
	h) opt_h=1				;;
	k) KERNEL="kernels/$OPTARG.gz"		;;
	n) opt_n=1				;;
	t) VERSION="$OPTARG"			;;
	s) opt_s=1				;;
	u) opt_u=-u				;;
    esac
done
shift $(expr $OPTIND - 1)

if [ -n "$opt_h" ] ; then
	echo "Usage: os-update [opts] [hosts]
opts:   -D dir Read source tarfiles and script from dir, and delete after 
opts:   -X     Exclude X distribution
	-K     Just install kernels
	-b     Install from binaries (default)
	-d dir Full distribution (including etc set)
	-f     Force (ignore value of /etc/release)
	-g     Get directly from nyftp.netbsd.org (use nbgetdaily)
	-h     This help
	-k nam Override name of kernel to install
	-n     No write (do not actually make any changes)
	-t tag Set OS tag to build
	-s     Rebuild from source
	-u     Run build with -u (and do not delete before or after build)
";
    exit
fi

if [ -n "$opt_g" ] ; then
    nbgetdaily
fi

if [ -n "$opt_s" ] ; then
    if ! nice -n 20 nbbuild $opt_u -t $VERSION ; then
	echo nbbuild failed
	exit 1
    fi
fi

if [ -z "$TARDIR" ] ; then
    ETCTAR_MATCH="$FILEDIR/$VERSION-$MACHINE-*/etc.t?z"
    TARDIR=$(ls $ETCTAR_MATCH | sed -n -e 's:/etc\.t.z::' -e '$p')
    if [ -z "$TARDIR" ] ; then
	echo "Unable to locate $ETCTAR_MATCH"
	exit 1
    fi
fi

if [ -n "$opt_X" ] ; then
    TARFILES="$(echo $TARDIR/[a-wyz]*.t?z)"
else
    TARFILES="$(echo $TARDIR/*.t?z)"
fi

cleanup()
    {
    if [ -n "$opt_D" ]; then
	for tarfile in $TARFILES ; do
	    run "rm -f $tarfile"
	done
    fi
    }

extract()
    {
    DESTDIR=$1
    cd "$DESTDIR"

    if [ -z "$opt_f" -a -f etc/release ] && \
		tar xqzfO $TARDIR/base.t?z ./etc/release 2>/dev/null | \
		cmp -s etc/release - ; then
	echo "$HOST:$DESTDIR etc/release version matches ($TARDIR)"
	cleanup
	return
    fi

    if [ -n "$opt_d" -o ! -d $DESTDIR/etc ] ; then
	extract_etc=1
    else
	extract_etc=
    fi

    KERN_TARFILES="$(echo $TARFILES | fmt 1 | grep '/kern-[^/]*$')"
    if [ -n "$extract_etc" ] ; then
	OTHER_TARFILES="$(echo $TARFILES | fmt 1 | grep -v '/kern-[^/]*$')"
    else
	OTHER_TARFILES="$(echo $TARFILES | fmt 1 | egrep -v '/(kern-|etc\.)[^/]*$')"
    fi

    [ -d kernels.old ] &&	run "rm -rf kernels.old"
    [ -d kernels ] &&		run "mv kernels kernels.old"
    				run "mkdir -p kernels"

    # Must extract kernel first
    for tarfile in $KERN_TARFILES; do
        kern=$(echo $tarfile | sed -e 's:.*/kern-::' -e 's:\.t.z$::')
                        	run "cd kernels && tar xzpf $tarfile"
                        	run "mv kernels/netbsd kernels/$kern"
                        	run "gzip -9 kernels/$kern"
    done

    if [ -z "$opt_n" -a ! -f $KERNEL ] ; then
	echo "**** Unable to locate $KERNEL"
	KERNEL=kernels/GENERIC.gz
    fi

    case $KERNEL in
      *DOM0*)
        DOM0_KERNEL=$KERNEL
        KERNEL=kernels/GENERIC.gz
        ;;
      *)
        DOM0_KERNEL=kernels/XEN3_DOM0.gz
        ;;
    esac

    [ -f netbsd ] &&		run "ln -f netbsd onetbsd"
				run "cp $KERNEL netbsd.new"
				run "mv netbsd.new netbsd"
    [ -f netbsd.dom0 ] &&	run "ln -f netbsd.dom0 onetbsd.dom0"
    if [ -f netbsd.dom0 ] ; then
				run "gzcat $DOM0_KERNEL > netbsd.dom0.new"
				run "mv netbsd.dom0.new netbsd.dom0"
    fi

    if [ -z "$opt_K" ] ; then

        for tarfile in $OTHER_TARFILES ; do
                        	run "tar xzpf $tarfile"
        done

				run "usr/sbin/postinstall -s $TARDIR/etc.t?z -d $DESTDIR fix || true"
				run "(cd dev && ./MAKEDEV all)"
				run "rm -rf kernels.old"

        if [ -n "$extract_etc" ] ; then
				run "cd / ; pax -rvw etc/rc.conf etc/fstab etc/ssh/sshd_config etc/rc.conf.common etc/master.passwd etc/passwd etc/pwd.db etc/spwd.db $DESTDIR || true"
        fi

        if [ ! -f boot ] ; then
				run "cp -p usr/mdec/boot boot"
				echo "*** Run installboot, check ssh keys, rc.conf, fstab ***"
        fi
    fi

    cleanup
    }

run()
    {
    echo "$HOST:$DESTDIR $@"
    if [ -z "$opt_n" ] ; then
	if [ -x /usr/bin/id -a $(id -u) != 0 ] ; then
	    sudo -H sh -c "$*"
	else
	    sh -c "$*"
	fi
    fi
    }

if [ -n "$1" ] ; then
    for host ; do
	echo
	run scp /pkgsrc/local/os-update $TARDIR/* $host:/var/run
	run ssh $host /var/run/os-update $opt_f -D /var/run
    done
else
    [ -n "$opt_D" ] &&	run "rm -f $opt_D/os-update"
    extract $DESTDIR

    if [ -f $DESTDIR/altroot/netbsd ] || mount | grep -q ' on /altroot ' ; then
	DESTDIR=$DESTDIR/altroot
	extract $DESTDIR
    fi
fi

elapsed=$(($(date +%s) - $start))
printf "Elapsed: %d:%02d\n" $(($elapsed / 60)) $(($elapsed % 60))

exit 0
